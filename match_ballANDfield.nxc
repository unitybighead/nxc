// do your best!
// Move----------------------------
#define SPEED 50
#define TURN_SPEED 70
#define US_STRAIGHT_TIME 500
#define TURN_TIME 400
#define STRAIGHT_TIME 1500
#define ONE_ROTATE_TIME 1145
#define D_1s 
// Target--------------------------
#define US_TARGET 40
// Threshold-----------------------
#define BALL_DETECT 40
#define BALL_CATCH 45
#define BALL_LOST BALL_DETECT - 20
// Port----------------------------
#define TIRE OUT_AB
#define IR_FIELD IN_2
#define IR_BALL IN_3
#define US IN_4
// Gain----------------------------
#define USKp 3
#define FKp 
// Other---------------------------
#define AVE 10
#define LOST 0
#define DETECT 1
#define CATCH 2
#define KICK 3
#define BLACK 0
#define WHITE 1
#define AWAY 0
#define CLOSE 1

// Private Variable---------------
byte our_goal = WHITE;
char steer;
byte ball_state;
bool move_state;
long direction;
byte old_us;
int old_field;
byte us_direction;
// Prototype Declaration-----------
void sensensor();
void rotate(long deg);
void wrap_around();
long PCon(long current, long Kp, long target);
void USmove();
void USsensor();
void ball_sensor();
void ball_detecting();
void u_Wait(long ms);
// Private Function----------------

void setsensor() {
  SetSensorLowspeed(US);
  SetSensor(IR_BALL, SENSOR_LIGHT);
  SetSensorMode(IR_BALL, SENSOR_MODE_PERCENT);
  SetSensorType(IR_BALL, SENSOR_TYPE_LIGHT_INACTIVE);
  SetSensor(IR_FIELD, SENSOR_LIGHT);
  SetSensorMode(IR_FIELD, SENSOR_MODE_RAW);
  SetSensorType(IR_FIELD, SENSOR_TYPE_LIGHT_ACTIVE);
  Wait(100);
}

void rotate(long deg) {
  if (deg > 0) {
    OnFwdSync(TIRE, SPEED, 100);
    u_Wait(ONE_ROTATE_TIME * deg / 360);
    direction += deg;
  } else {
    OnFwdSync(TIRE, SPEED, -100);
    u_Wait(ONE_ROTATE_TIME * deg / 360);
    direction -= deg;
  }
}

void wrap_around() {
  long old = direction;
  while (direction >= old + 90) {
    OnFwdSync(TIRE, 30, 50);
    u_Wait(500);
  }
}

long PCon(long current, float Kp, long target) {
  long dev = current - target;
  return Kp * dev;
}

void u_Wait(long ms) {
  long old = CurrentTick();
  while (CurrentTick() < old + ms)
    ;
}

// Private Task--------------------

void ball_sensor() {
  PlayTone(523, 10);
  u_Wait(16);
  int sensor = Sensor(IR_BALL);
  if (sensor >= BALL_DETECT) {
    ball_state = DETECT;
  }
  if (sensor >= BALL_CATCH) {
    ball_state = CATCH;
  } else {  //(sensor < BALL_LOST){
    ball_state = LOST;
  }
  ClearScreen();
  NumOut(0, LCD_LINE1, ball_state);
}

void ball_detecting() {
  int old_field, current_field;
  old_field = 0, current_field = 0;

  while (ball_state == LOST) {
    ball_sensor();
    OnFwdSync(TIRE, 50, 100);
  }
  OnFwdSync(TIRE, SPEED, 0);
  while (ball_state == DETECT) {
    ball_sensor();
  }
  Off(TIRE);

  // lost
  if (ball_state == LOST) {
    PlayTone(440, 100);
    OnRevSync(TIRE, 30, 0);
    u_Wait(100);
  }

  // catch
  else if (ball_state = CATCH) {
    PlayTone(1263, 100);
    repeat(AVE) {
      old_field += Sensor(IR_FIELD);
      u_Wait(50);
    }

    old_field /= AVE;
    OnFwdSync(TIRE, 40, 0);
    u_Wait(500);

    repeat(AVE) {
      current_field += Sensor(IR_FIELD);
      u_Wait(50);
    }
    current_field /= AVE;
    if ((our_goal == WHITE && current_field < old_field)        // go to white
        || (our_goal == BLACK && current_field > old_field)) {  // go to black
      wrap_around();
    }

    OnFwdSync(TIRE, SPEED, 0);
    ball_state = KICK;
  }
}

void USmove() {
  old_field = Sensor(IR_FIELD);
  while (ball_state != LOST) {
    ball_sensor();
    field_sensor_P();
    rotate(steer);
    USsensor();
    if (steer != 0) {
      rotate(steer);
      OnFwdSync(TIRE, SPEED, 0);
      u_Wait(US_STRAIGHT_TIME);
      rotate(-steer);
      Off(TIRE);
    }
    OnFwdSync(TIRE, SPEED, 0);
    u_Wait(1000);
    Off(TIRE);
  }
}

void USsensor() {
  PlayTone(880, 1000);
  byte current;
  ClearSensor(US);
  ClearScreen();
  current = SensorUS(US);
  if (current < 0 || current >= 255) {
    PlayTone(1000, 100);
    ClearSensor(US);
  } else {
    NumOut(10, LCD_LINE1, current);

    steer = PCon(current, USKp, US_TARGET);
    if (abs(steer) < 20) {
      steer = 0;
    }
    // too big
    if (steer < -70) {
      steer = -70;
    } else if (steer > 70) {
      steer = 70;
    }
    // noise
    if (current < old_us - 30) {
      steer = 0;
    }
    NumOut(10, LCD_LINE2, steer);

    if (current < old) {
      us_direction = CLOSE
    } else {
      us_direction = AWAY
    }
    old_us = current;
  }
}

void field_sensor() {
  int current = Sensor(IR_FIELD);
  int dif = old - current;
  long deg = 90 - asin(dif/D_1s);
  steer += -deg;
  old_field = current;
}

void field_sensor_P(){
  steer = PCon(Sensor(IR_FIELD, FKp, D_1s));
}

task main() {
  setsensor();
  ball_state = LOST;
  direction = 0;
  old_us = SensorUS(US);
  old_field = Sensor(IR_FIELD);
  NumOut(0, LCD_LINE1, ball_state);

  while (true) {
    if (ball_state != KICK) {
      ball_detecting();
    } else {
      USmove();
    }
  }
}
