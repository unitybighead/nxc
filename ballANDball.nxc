// Move----------------------------
#define SPEED 75
#define DETECT_ROTATE 20
// Threshold-----------------------
#define BALL_DETECT 45
#define BALL_CATCH 5
#define BALL_LOST BALL_DETECT - 20
// Port----------------------------
#define TIRE OUT_AB
#define IR_LEFT IN_2
#define IR_RIGHT IN_3
#define US IN_4
// Other---------------------------
#define AVE 10
#define LOST 0
#define DETECT 1
#define CATCH 2
#define KICK 3
#define CENTER 0
#define LEFT 1
#define RIGHT 2
#define BLACK 0
#define WHITE 1
// Gain---------------------------

// Private Variable---------------
byte our_goal = WHITE;
char steer;
byte ball_state;
byte ball_place;
bool move_state;
long direction;
// Prototype Declaration-----------
void sentsensor();
void rotate(long deg);
void wrap_around();
long PCon(long current, long Kp, long target);
void ball_sensor();
void ball_detecting();
void kick();
void u_Wait(long ms);
void check_direction();
// Private Function----------------

void setsensor() {
  SetSensorLowspeed(US);
  SetSensor(IR_LEFT, SENSOR_LIGHT);
  SetSensorMode(IR_LEFT, SENSOR_MODE_PERCENT);
  SetSensorType(IR_LEFT, SENSOR_TYPE_LIGHT_INACTIVE);
  SetSensor(IR_RIGHT, SENSOR_LIGHT);
  SetSensorMode(IR_RIGHT, SENSOR_MODE_PERCENT);
  SetSensorType(IR_RIGHT, SENSOR_TYPE_LIGHT_INACTIVE);
  Wait(100);
}

void rotate(long deg) {
  if (deg > 0) {
    RotateMotorEx(TIRE, SPEED, deg * 1.45, 100, true, true);
    direction += deg;
  } else {
    RotateMotorEx(TIRE, SPEED, deg * 1.35, -100, true, true);
    direction -= deg;
  }
}

void wrap_around() {
  long old = direction;
  while (direction >= old + 90) {
    rotate(30);
    RotateMotorEx(TIRE, SPEED, 60, 0, true, true);
  }
}

long PCon(long current, long Kp, long target) {
  long dev = current - target;
  return Kp * dev;
}

void u_Wait(long ms) {
  long old = CurrentTick();
  while (CurrentTick() < old + ms)
    ;
}

void check_direction() {
  if (direction > 180) {
    direction -= 360;
  } else if (direction < -180) {
    direction += 360;
  }
}

void ball_detecting() {
  ball_sensor();
  switch (ball_state) {
    case LOST:
      int i = 0;
      while (i < 12) {
        rotate(30);
        ball_sensor();
        if (ball_state != LOST) {
          break;
        }
      }
      OnFwdSync(TIRE, SPEED, 0);
      u_Wait(1000);
      break;

    case DETECT:
      switch (ball_place) {
        case CENTER:
          OnFwdSync(TIRE, SPEED - 25, 0);
          break;

        case LEFT:
          rotate(-DETECT_ROTATE);
          break;

        case RIGHT:
          rotate(DETECT_ROTATE);
          break;

        default:
          break;
      }
    case CATCH:
      kick();
      break;

    default:
      break;
  }
}

void kick() {
  check_direction();
  rotate(-direction);
  OnFwdSync(TIRE, SPEED, 0);
  u_Wait(1000);
}

void ball_sensor() {
  int left = Sensor(IR_LEFT), right = Sensor(IR_RIGHT);

  if (left > BALL_CATCH || right > BALL_CATCH) {
    ball_state = CATCH;
  }

  else if (left > BALL_CATCH || right > BALL_CATCH) {
    ball_state = DETECT;
    if (left > BALL_DETECT && right > BALL_DETECT) {
      ball_place = CENTER;
    } else if (left > BALL_DETECT) {
      ball_place = LEFT;
    } else {
      ball_place = RIGHT;
    }
  }

  else {
    ball_state = LOST;
  }
}

task main() {
  setsensor();
  ball_state = LOST;
  ball_place = CENTER;
  direction = 0;
  while (true) {
    ball_detecting();
    check_direction();
  }
}
